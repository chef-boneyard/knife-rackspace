= Knife Rackspace

= DESCRIPTION:

This is the official Opscode Knife plugin for Rackspace Cloud Servers. This plugin gives knife the ability to create, bootstrap, and manage servers on all the regions for Rackspace Cloud Servers.

= INSTALLATION:

Be sure you are running the latest version Chef. Versions earlier than 0.10.0 don't support plugins:

    gem install chef

This plugin is distributed as a Ruby Gem. To install it, run:

    gem install knife-rackspace

Depending on your system's configuration, you may need to run this command with root privileges.

Ensure only the latest knife-rackspace gem and no other is installed.  In some cases having older versions of the gem
will cause the new OpenStack functionality not to function properly.  To check:

    $> gem list --local | grep knife-rackspace
    knife-rackspace (0.6.2, 0.5.12)
    $> gem uninstall knife-rackspace -v "= 0.5.12"
    Successfully uninstalled knife-rackspace-0.5.12
    $> gem list --local | grep knife-rackspace
    knife-rackspace (0.6.2)


= CONFIGURATION:

In order to communicate with the Rackspace Cloud API you will have to tell Knife about your Username and API Key. The easiest way to accomplish this is to create some entries in your <tt>knife.rb</tt> file:

    knife[:rackspace_api_username] = "Your Rackspace API username"
    knife[:rackspace_api_key] = "Your Rackspace API Key"

If your knife.rb file will be checked into a SCM system (ie readable by others) you may want to read the values from environment variables:

    knife[:rackspace_api_username] = "#{ENV['RACKSPACE_USERNAME']}"
    knife[:rackspace_api_key] = "#{ENV['RACKSPACE_API_KEY']}"

You also have the option of passing your Rackspace API Username/Key into the individual knife subcommands using the <tt>-A</tt> (or <tt>--rackspace-api-username</tt>) <tt>-K</tt> (or <tt>--rackspace-api-key</tt>) command options

    # provision a new 1GB Ubuntu 10.04 webserver
    knife rackspace server create -I 112 -f 3 -A 'Your Rackspace API username' -K "Your Rackspace API Key" -r 'role[webserver]'

To select for the previous Rackspace API (aka 'v1'), you can use the <tt>--rackspace-version v1</tt> command option. 'v2' is the default, so if you're still using exclusively 'v1' you will probably want to add the following to your <tt>knife.rb</tt>:

    knife[:rackspace_version] = 'v1'

This plugin also has support for authenticating against an alternate API Auth URL. This is useful if you are a using a custom endpoint, here is an example of configuring your <tt>knife.rb</tt>:

    knife[:rackspace_auth_url] = "auth.my-custom-endpoint.com"


Different regions can be specified by using the `--rackspace-region` switch or using the `knife[:rackspace_region]` in the knife.rb file. Valid regions include :dfw, :ord, :lon, and :syd.

If you are behind a proxy you can specify it in the knife.rb file as follows:

    https_proxy https://PROXY_IP_ADDRESS:PORT

SSL certificate verification can be disabled by include the following in your knife.rb file:

    knife[:ssl_verify_peer] = false

Additionally the following options may be set in your <tt>knife.rb</tt>:

* flavor
* image
* distro
* template_file

= SUBCOMMANDS:

This plugin provides the following Knife subcommands. Specific command options can be found by invoking the subcommand with a <tt>--help</tt> flag

== knife rackspace server create

Provisions a new server in the Rackspace Cloud and then perform a Chef bootstrap (using the SSH protocol). The goal of the bootstrap is to get Chef installed on the target system so it can run Chef Client with a Chef Server. The main assumption is a baseline OS installation exists (provided by the provisioning). It is primarily intended for Chef Client systems that talk to a Chef server. By default the server is bootstrapped using the {chef-full}[https://github.com/opscode/chef/blob/master/chef/lib/chef/knife/bootstrap/chef-full.erb] template. This can be overridden using the <tt>-d</tt> or <tt>--template-file</tt> command options.

If no name is provided, nodes created with  the v1 API are named after their instance ID, with the v2 API they are given a random 'rs-XXXXXXXXX' name.

Files can be injected onto the provisioned system using the <tt>--file</tt> switch. For example to inject <tt>my_script.sh</tt> into <tt>/root/initialize.sh</tt> you would use the following switch

    --file /root/initialize.sh=my_script.sh.

Note: You can only inject text files and the maximum destination path is 255 characters.

You may specify if want to manage your disk partitioning scheme with the <tt>--rackspace-disk-config DISKCONFIG</tt> option. If you bootstrap a `v2` node and leave this set to the default "AUTO", larger nodes take longer to bootstrap as it grows the disk from 10G to fill the full amount of local disk provided. This option allows you to pass "MANUAL" - which give you a node (in 1/2 to 1/4 of the time) and lets you manage ignoring, or formatting the rest of the disk on your own.

http://docs.openstack.org/essex/openstack-compute/starter/content/Launch_and_manage_instances-d1e1885.html

You may specify a custom network using the <tt>--network [LABEL_OR_ID]</tt> option. You can also remove the default internal ServiceNet and PublicNet networks by specifying the <tt>--no-default-networks</tt> switch.

== knife rackspace server delete

Deletes an existing server in the currently configured Rackspace Cloud account by the server/instance id. You can find the instance id by entering <tt>knife rackspace server list</tt>. Please note - this does not delete the associated node and client objects from the Chef server unless you pass the <tt>-P</tt> or <tt>--purge</tt> command option. Using the <tt>--purge</tt> option with v2 nodes will attempt to delete the node and client by the name of the node.

== knife rackspace server list

Outputs a list of all servers in the currently configured Rackspace Cloud account. Please note - this shows all instances associated with the account, some of which may not be currently managed by the Chef server. You may need to use the <tt>--rackspace-version</tt> and <tt>--rackspace-region</tt> options to see nodes in different Rackspace regions.

== knife rackspace flavor list

Outputs a list of all available flavors (available hardware configuration for a server) available to the currently configured Rackspace Cloud account. Each flavor has a unique combination of disk space, memory capacity and priority for CPU time. This data can be useful when choosing a flavor id to pass to the <tt>knife rackspace server create</tt> subcommand. You may need to use the <tt>--rackspace-version</tt> and <tt>--rackspace-region</tt> options to see nodes in different Rackspace regions.

== knife rackspace image list

Outputs a list of all available images available to the currently configured Rackspace Cloud account. An image is a collection of files used to create or rebuild a server. Rackspace provides a number of pre-built OS images by default. This data can be useful when choosing an image id to pass to the <tt>knife rackspace server create</tt> subcommand. You may need to use the <tt>--rackspace-version</tt> and <tt>--rackspace-region</tt> options to see nodes in different Rackspace regions.

== knife rackspace network list

Outputs a list of available networks to the currently configured Rackspace Cloud account. Networks can be added at a server during the creation process using the <tt>--network [LABEL_OR_ID]</tt> option. Knife does not currently support adding a network to an existing server.

== knife rackspace network create

Creates a new cloud network. Both the label and the CIDR are required parameters which are specified using the <tt>--label LABEL</tt>  and <tt>--cidr CIDR</tt> respectively. The CIDR should be in the form of 172.16.0.0/24 or 2001:DB8::/64. Refer to http://www.rackspace.com/knowledge_center/article/using-cidr-notation-in-cloud-networks for more information.

== knife rackspace network delete

Deletes one or more specified networks by id. The network must be detached from all hosts before it is deleted.

= LICENSE:

Author:: Adam Jacob (<adam@opscode.com>)
Author:: Seth Chisamore (<schisamo@opscode.com>)
Author:: Matt Ray (<matt@opscode.com>)
Copyright:: Copyright (c) 2009-2012 Opscode, Inc.
License:: Apache License, Version 2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
